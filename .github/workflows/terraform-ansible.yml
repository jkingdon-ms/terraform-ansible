name: 'Deploy and configure server with Terraform and Ansible'

on:
  push
  # push:
  #   branches: [ "main" ]
  # pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    outputs:
      admin_username: ${{ steps.tfapply.outputs.admin_username }}
      host: ${{ steps.tfapply.outputs.host }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1        
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - id: tfapply
        name: Terraform Apply
        # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve -input=false
          echo "admin_username=$(terraform output admin_username)" >> $GITHUB_OUTPUT
          echo "host=$(terraform output host)" >> $GITHUB_OUTPUT
       
  ansible:
    name: 'Ansible'
    runs-on: ubuntu-latest
    needs: terraform

    steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v3

        - name: Run playbook
          uses: dawidd6/action-ansible-playbook@v2
          with:
            # Required, playbook filepath
            playbook: playbook.yml
            # Optional, SSH private key
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            inventory: |
              [all]
              ${{needs.terraform.outputs.host}}                     
            # Optional, additional flags to pass to ansible-playbook
            options: |
              -u ${{needs.terraform.outputs.admin_username}}
